# -*- coding: utf-8 -*-
"""mental_fitness_tracker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ybHe7kPvoT226reShNpArCVRq0N-McLF
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

"""

```
`# This is formatted as code`
```

# New Section"""

import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

df1=pd.read_csv("/content/mental-and-substance-use-as-share-of-disease.csv")
df2=pd.read_csv("/content/prevalence-by-mental-and-substance-use-disorder.csv")

"""

```
# This is formatted as code
```

# New Section"""

df1.head()

df2.head(10)

data = pd.merge(df1,df2)
data.head(10)

data.isnull().sum()

data.drop('Code',axis=1,inplace=True)

data.head()

data.shape,data.size

data.set_axis(['Country','Year','Schizophrenia','Bipolar_disorder','Eating_disorder','Anxiety','drug_usage','depression','alcohol','mental_fitness'],axis='columns',inplace=True)

data.head(10)

plt.figure(figsize=(12,6))
sns.heatmap(data.corr(),annot=True,cmap='Blues')
plt.plot()

sns.pairplot(data,corner=True)
plt.show()

mean=data['mental_fitness'].mean()
mean

fig=px.pie(data,values='mental_fitness',names='Year')
fig.show()

fig=px.line(data,x='Year',y='mental_fitness',color='Country',markers=True,color_discrete_sequence=['red','blue'],template='plotly_dark')
fig.show()

df = pd.DataFrame(data)
df.info()

from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
for i in df.columns:
  if df[i].dtype == 'object':
    df[i]=l.fit_transform(df[i])

df.shape

from scipy.sparse import random
X= df.drop('mental_fitness',axis=1)
y = df['mental_fitness']
from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(X,y,test_size=20,random_state=2)

print('xtrain:',xtrain.shape)
print('xtest :',xtest.shape)
print('ytrain:',ytrain.shape)
print('ytest:',ytest.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score
lr= LinearRegression()
lr.fit(xtrain,ytrain)

ytrain_pred = lr.predict(xtrain)

mse = mean_squared_error(ytrain, ytrain_pred)

rmse = ( np.sqrt(mean_squared_error(ytrain,ytrain_pred)))
r2 = r2_score(ytrain,ytrain_pred)
print('The Linear Regression model performance for training set')
print('------------------------------')
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 is {}'.format(r2))

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(xtrain,ytrain)
mse = mean_squared_error(ytrain, ytrain_pred)

rmse = ( np.sqrt(mean_squared_error(ytrain,ytrain_pred)))
r2 = r2_score(ytrain,ytrain_pred)
print('The Random Forest Regressor performance for training set')
print('------------------------------')
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 is {}'.format(r2))